This file contains any messages produced by compilers while
running configure, to aid debugging if configure makes a mistake.

It was created by auctex configure 13.1, which was
generated by GNU Autoconf 2.71.  Invocation command line was

  $ ./configure -with-emacs=/opt/homebrew/bin/emacs --with-lisp-dir=/Users/diphia/pure-emacs/.emacs.d/site-lisp --with-texmf-dir=/usr/local/texlive/texmf-local

## --------- ##
## Platform. ##
## --------- ##

hostname = mac-server
uname -m = arm64
uname -r = 21.1.0
uname -s = Darwin
uname -v = Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101

/usr/bin/uname -p = arm
/bin/uname -X     = unknown

/bin/arch              = unknown
/usr/bin/arch -k       = unknown
/usr/convex/getsysinfo = unknown
/usr/bin/hostinfo      = Mach kernel version:
	 Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101
Kernel configured for up to 8 processors.
8 processors are physically available.
8 processors are logically available.
Processor type: arm64e (ARM64E)
Processors active: 0 1 2 3 4 5 6 7
Primary memory available: 16.00 gigabytes
Default processor set: 598 tasks, 3459 threads, 8 processors
Load average: 6.45, Mach factor: 4.49
/bin/machine           = unknown
/usr/bin/oslevel       = unknown
/bin/universe          = unknown

PATH: /home/diphia/.local/bin/
PATH: /opt/homebrew/bin/
PATH: /opt/homebrew/sbin/
PATH: /usr/local/bin/
PATH: /usr/bin/
PATH: /bin/
PATH: /usr/sbin/
PATH: /sbin/
PATH: /Library/TeX/texbin/
PATH: /Applications/Racket/bin/
PATH: /home/diphia/.local/bin/
PATH: /opt/homebrew/bin/
PATH: /opt/homebrew/sbin/


## ----------- ##
## Core tests. ##
## ----------- ##

configure:1769: looking for aux files: install-sh
configure:1782:  trying ./
configure:1793:   ./install-sh found
configure:1928: checking for make
configure:1949: found /usr/bin/make
configure:1960: result: make
configure:1976: checking whether make sets $(MAKE)
configure:1999: result: yes
configure:2024: checking for a BSD-compatible install
configure:2097: result: /opt/homebrew/bin/ginstall -c
configure:2110: checking for date with git
configure:2123: result: 2022-05-13
configure:2126: checking for release with git
configure:2139: result: git not found, checking for release in ChangeLog:
configure:2148: result: 13.1
configure:2157: checking for date with git
configure:2170: result: 2022-05-13
configure:2173: checking for release with git
configure:2186: result: git not found, checking for release in ChangeLog:
configure:2195: result: 13.1
configure:2225: checking for /opt/homebrew/bin/emacs
configure:2260: result: /opt/homebrew/bin/emacs
configure:2279: checking for Emacs prefix
/opt/homebrew/bin/emacs -batch -no-site-file -eval (let* ((cmd(pop command-line-args-left))(x (condition-case nil (let*
    ((prefix (directory-file-name (file-name-directory (executable-find cmd))))
     (parent (directory-file-name (file-name-directory prefix))))
    (if (string= (file-name-nondirectory prefix) "bin")
        (setq prefix parent)
      (if (string= (file-name-nondirectory parent) "bin")
         (setq prefix (directory-file-name (file-name-directory parent)))))
    prefix) (error NONE)))) (write-region (if (stringp x) x (prin1-to-string x)) nil "./conftest-32351")) /opt/homebrew/bin/emacs
=> /opt/homebrew
configure:2298: result: "/opt/homebrew"
configure:2303: checking if Emacs is recent enough
/opt/homebrew/bin/emacs -batch -no-site-file -eval (let* ((x (cond ((< emacs-major-version 24) "no")
			 ((> emacs-major-version 24) "yes")
			 ((< emacs-minor-version 03) "no")
			 (t "yes")))) (write-region (if (stringp x) x (prin1-to-string x)) nil "./conftest-32351"))
=> yes
configure:2317: result: yes
configure:2355: checking if build directory is valid
/opt/homebrew/bin/emacs -batch -eval (let* ((x (if (or (member (directory-file-name default-directory) load-path)	      (member (file-name-as-directory default-directory) load-path))	 "no" "yes"))) (write-region (if (stringp x) x (prin1-to-string x)) nil "./conftest-32351"))
=> yes
configure:2371: result: yes
configure:2389: checking where lisp files go
/opt/homebrew/bin/emacs -batch -eval (let* ((prefix(pop command-line-args-left)) (expanded(pop command-line-args-left)) (x (catch 22
       (let (reldir (dirs load-path))
	  (dolist (name (list "emacs/site-lisp" "emacs/site-packages"
	      "site-lisp" "site-packages") "NONE")
	    (dolist (dir dirs)
	      (when (and dir
	      	         (setq dir (directory-file-name dir))
                         (file-name-absolute-p dir)
	      	         (file-directory-p dir)
	                 (not (string-match "\`\.\."
                           (setq reldir (file-relative-name dir expanded))))
			 (not (file-name-absolute-p reldir))
                         (let ((name name) (dir dir))
		           (while (and dir name
		                       (string= (file-name-nondirectory dir)
		                                (file-name-nondirectory name))
                              (setq dir (file-name-directory dir)
				   name (file-name-directory name))
			      (if (and dir name)
			         (setq dir (directory-file-name dir)
			              name (directory-file-name name)))))
		            (null name))
		   (throw 22
                      (if (string= reldir ".") (directory-file-name prefix)
                        (concat (file-name-as-directory prefix)
                                reldir))))))))))) (write-region (if (stringp x) x (prin1-to-string x)) nil "./conftest-32351")) ${datadir}/emacs /usr/local/share/emacs
=> NONE
/opt/homebrew/bin/emacs -batch -eval (let* ((prefix(pop command-line-args-left)) (expanded(pop command-line-args-left)) (x (catch 22
       (let (reldir (dirs load-path))
	  (dolist (name (list "emacs/site-lisp" "emacs/site-packages"
	      "site-lisp" "site-packages") "NONE")
	    (dolist (dir dirs)
	      (when (and dir
	      	         (setq dir (directory-file-name dir))
                         (file-name-absolute-p dir)
	      	         (file-directory-p dir)
	                 (not (string-match "\`\.\."
                           (setq reldir (file-relative-name dir expanded))))
			 (not (file-name-absolute-p reldir))
                         (let ((name name) (dir dir))
		           (while (and dir name
		                       (string= (file-name-nondirectory dir)
		                                (file-name-nondirectory name))
                              (setq dir (file-name-directory dir)
				   name (file-name-directory name))
			      (if (and dir name)
			         (setq dir (directory-file-name dir)
			              name (directory-file-name name)))))
		            (null name))
		   (throw 22
                      (if (string= reldir ".") (directory-file-name prefix)
                        (concat (file-name-as-directory prefix)
                                reldir))))))))))) (write-region (if (stringp x) x (prin1-to-string x)) nil "./conftest-32351")) ${libdir}/emacs /usr/local/lib/emacs
=> NONE
/opt/homebrew/bin/emacs -batch -eval (let* ((prefix(pop command-line-args-left)) (expanded(pop command-line-args-left)) (x (catch 22
       (let (reldir (dirs load-path))
	  (dolist (name (list "emacs/site-lisp" "emacs/site-packages"
	      "site-lisp" "site-packages") "NONE")
	    (dolist (dir dirs)
	      (when (and dir
	      	         (setq dir (directory-file-name dir))
                         (file-name-absolute-p dir)
	      	         (file-directory-p dir)
	                 (not (string-match "\`\.\."
                           (setq reldir (file-relative-name dir expanded))))
			 (not (file-name-absolute-p reldir))
                         (let ((name name) (dir dir))
		           (while (and dir name
		                       (string= (file-name-nondirectory dir)
		                                (file-name-nondirectory name))
                              (setq dir (file-name-directory dir)
				   name (file-name-directory name))
			      (if (and dir name)
			         (setq dir (directory-file-name dir)
			              name (directory-file-name name)))))
		            (null name))
		   (throw 22
                      (if (string= reldir ".") (directory-file-name prefix)
                        (concat (file-name-as-directory prefix)
                                reldir))))))))))) (write-region (if (stringp x) x (prin1-to-string x)) nil "./conftest-32351")) /opt/homebrew/share/emacs /opt/homebrew/share/emacs
=> /opt/homebrew/share/emacs/site-lisp
configure:2457: result: /opt/homebrew/share/emacs/site-lisp
configure:2461: checking what file to use for auctex startup
configure:2489: result: /opt/homebrew/share/emacs/site-lisp/auctex.el
configure:2492: checking what file to use for preview startup
configure:2520: result: /opt/homebrew/share/emacs/site-lisp/preview-latex.el
configure:2530: checking where the package lisp files go
/opt/homebrew/bin/emacs -batch -no-site-file -eval (let* ((path(pop command-line-args-left)) (lispdir(pop command-line-args-left)) (startup(pop command-line-args-left)) (target(pop command-line-args-left))(x (progn (setq path (directory-file-name path))
  (if (or target
          (not (string= (car load-path) (directory-file-name (car load-path)))))
    (setq path (file-name-as-directory path)))
  (setq path (expand-file-name path lispdir))
  (setq startupdir (file-name-directory (expand-file-name startup lispdir)))
  (prin1-to-string
    (if (or (string-match "\`\.\."
              (setq relname (file-relative-name startupdir lispdir)))
            (file-name-absolute-p relname)
	    (string-match "\`\.\."
              (setq relname (file-relative-name path lispdir)))
 	    (file-name-absolute-p relname))
	  (concat path target)
	(cond (target
	       `(expand-file-name
                   ,(file-relative-name (concat path target) startupdir)
	           (file-name-directory load-file-name)))
              ((string= path startupdir)
	         '(file-name-directory load-file-name))
	      ((string= path (directory-file-name startupdir))
                 '(directory-file-name (file-name-directory load-file-name)))
              (t
	       `(expand-file-name
                   ,(file-relative-name path startupdir)
	           (file-name-directory load-file-name))))))))) (write-region (if (stringp x) x (prin1-to-string x)) nil "./conftest-32351")) /opt/homebrew/share/emacs/site-lisp/auctex /opt/homebrew/share/emacs/site-lisp /opt/homebrew/share/emacs/site-lisp/tex-site.el
=> (expand-file-name "auctex" (file-name-directory load-file-name))
configure:2612: result: /opt/homebrew/share/emacs/site-lisp/auctex
configure:2615: checking where the data files go
/opt/homebrew/bin/emacs -batch -no-site-file -eval (let* ((path(pop command-line-args-left)) (lispdir(pop command-line-args-left)) (startup(pop command-line-args-left)) (target(pop command-line-args-left))(x (progn (setq path (directory-file-name path))
  (if (or target
          (not (string= (car load-path) (directory-file-name (car load-path)))))
    (setq path (file-name-as-directory path)))
  (setq path (expand-file-name path lispdir))
  (setq startupdir (file-name-directory (expand-file-name startup lispdir)))
  (prin1-to-string
    (if (or (string-match "\`\.\."
              (setq relname (file-relative-name startupdir lispdir)))
            (file-name-absolute-p relname)
	    (string-match "\`\.\."
              (setq relname (file-relative-name path lispdir)))
 	    (file-name-absolute-p relname))
	  (concat path target)
	(cond (target
	       `(expand-file-name
                   ,(file-relative-name (concat path target) startupdir)
	           (file-name-directory load-file-name)))
              ((string= path startupdir)
	         '(file-name-directory load-file-name))
	      ((string= path (directory-file-name startupdir))
                 '(directory-file-name (file-name-directory load-file-name)))
              (t
	       `(expand-file-name
                   ,(file-relative-name path startupdir)
	           (file-name-directory load-file-name))))))))) (write-region (if (stringp x) x (prin1-to-string x)) nil "./conftest-32351")) /opt/homebrew/share/emacs/site-lisp/auctex /opt/homebrew/share/emacs/site-lisp /opt/homebrew/share/emacs/site-lisp/tex-site.el
=> (expand-file-name "auctex" (file-name-directory load-file-name))
configure:2697: result: /opt/homebrew/share/emacs/site-lisp/auctex
/opt/homebrew/bin/emacs -batch -no-site-file -eval (let* ((path(pop command-line-args-left)) (lispdir(pop command-line-args-left)) (startup(pop command-line-args-left)) (target(pop command-line-args-left))(x (progn (setq path (directory-file-name path))
  (if (or target
          (not (string= (car load-path) (directory-file-name (car load-path)))))
    (setq path (file-name-as-directory path)))
  (setq path (expand-file-name path lispdir))
  (setq startupdir (file-name-directory (expand-file-name startup lispdir)))
  (prin1-to-string
    (if (or (string-match "\`\.\."
              (setq relname (file-relative-name startupdir lispdir)))
            (file-name-absolute-p relname)
	    (string-match "\`\.\."
              (setq relname (file-relative-name path lispdir)))
 	    (file-name-absolute-p relname))
	  (concat path target)
	(cond (target
	       `(expand-file-name
                   ,(file-relative-name (concat path target) startupdir)
	           (file-name-directory load-file-name)))
              ((string= path startupdir)
	         '(file-name-directory load-file-name))
	      ((string= path (directory-file-name startupdir))
                 '(directory-file-name (file-name-directory load-file-name)))
              (t
	       `(expand-file-name
                   ,(file-relative-name path startupdir)
	           (file-name-directory load-file-name))))))))) (write-region (if (stringp x) x (prin1-to-string x)) nil "./conftest-32351"))  /opt/homebrew/share/emacs/site-lisp /opt/homebrew/share/emacs/site-lisp/auctex.el tex-site.el
=> (expand-file-name "tex-site.el" (file-name-directory load-file-name))
configure:2774: checking where the info files go
configure:2776: result: ${datarootdir}/info
configure:2779: checking where automatically generated global style hooks go
configure:2790: result: ${localstatedir}/auctex
/opt/homebrew/bin/emacs -batch -no-site-file -eval (let* ((path(pop command-line-args-left)) (lispdir(pop command-line-args-left)) (startup(pop command-line-args-left)) (target(pop command-line-args-left))(x (progn (setq path (directory-file-name path))
  (if (or target
          (not (string= (car load-path) (directory-file-name (car load-path)))))
    (setq path (file-name-as-directory path)))
  (setq path (expand-file-name path lispdir))
  (setq startupdir (file-name-directory (expand-file-name startup lispdir)))
  (prin1-to-string
    (if (or (string-match "\`\.\."
              (setq relname (file-relative-name startupdir lispdir)))
            (file-name-absolute-p relname)
	    (string-match "\`\.\."
              (setq relname (file-relative-name path lispdir)))
 	    (file-name-absolute-p relname))
	  (concat path target)
	(cond (target
	       `(expand-file-name
                   ,(file-relative-name (concat path target) startupdir)
	           (file-name-directory load-file-name)))
              ((string= path startupdir)
	         '(file-name-directory load-file-name))
	      ((string= path (directory-file-name startupdir))
                 '(directory-file-name (file-name-directory load-file-name)))
              (t
	       `(expand-file-name
                   ,(file-relative-name path startupdir)
	           (file-name-directory load-file-name))))))))) (write-region (if (stringp x) x (prin1-to-string x)) nil "./conftest-32351")) /usr/local/var/auctex /opt/homebrew/share/emacs/site-lisp /opt/homebrew/share/emacs/site-lisp/tex-site.el
=> "/usr/local/var/auctex"
configure:2870: checking for tex
configure:2893: found /Library/TeX/texbin/tex
configure:2906: result: /Library/TeX/texbin/tex
configure:2916: checking for pdftex
configure:2939: found /Library/TeX/texbin/pdftex
configure:2952: result: /Library/TeX/texbin/pdftex
configure:2962: checking for dvips
configure:2985: found /Library/TeX/texbin/dvips
configure:2998: result: /Library/TeX/texbin/dvips
configure:3015: checking for gs
configure:3036: found /opt/homebrew/bin/gs
configure:3047: result: gs
/opt/homebrew/bin/emacs -batch -no-site-file -eval (let* ((dir(pop command-line-args-left))(x (if (member dir (list "NONE" (if (eq system-type 'windows-nt) "GSWIN32C.EXE" "gs"))) "" `(defvar preview-gs-command ,dir)))) (write-region (if (stringp x) x (prin1-to-string x)) nil "./conftest-32351")) gs
=> 
configure:3075: checking for latex
configure:3098: found /Library/TeX/texbin/latex
configure:3111: result: /Library/TeX/texbin/latex
configure:3127: checking for pdflatex
configure:3150: found /Library/TeX/texbin/pdflatex
configure:3162: result: /Library/TeX/texbin/pdflatex
configure:3181: checking for tex
configure:3217: result: /Library/TeX/texbin/tex
configure:3658: checking for texhash
configure:3681: found /Library/TeX/texbin/texhash
configure:3693: result: /Library/TeX/texbin/texhash
configure:3703: checking for initexmf
configure:3735: result: /Library/TeX/texbin/texhash
configure:3799: checking for glaring installation conflicts
/opt/homebrew/bin/emacs -batch -eval (let* ((packagelispdir(pop command-line-args-left)) (previewstartfile(pop command-line-args-left))(x 
     (concat
       (and (setq tmp (locate-library "preview.elc"))
            (not (string= (file-truename tmp)
                       (file-truename (expand-file-name "preview.elc"
                                         packagelispdir))))
            (format "Conflicting previous installation in `%s' found!
"
                    (file-name-directory tmp)))
       (and (setq tmp (locate-library "preview-latex.el"))
            (not (string= (file-truename tmp)
                          (file-truename previewstartfile)))
            (format "Conflicting previous startup file `%s' found!
" tmp))))) (write-region (if (stringp x) x (prin1-to-string x)) nil "./conftest-32351")) /opt/homebrew/share/emacs/site-lisp/auctex /opt/homebrew/share/emacs/site-lisp/preview-latex.el
=> 
configure:3861: result: probably none
configure:3921: checking for perl
configure:3944: found /usr/bin/perl
configure:3957: result: /usr/bin/perl
configure:3971: checking for makeinfo
configure:3994: found /usr/bin/makeinfo
configure:4007: result: /usr/bin/makeinfo
configure:4017: checking for texi2html
configure:4053: result: :
configure:4063: checking for texi2dvi
configure:4086: found /usr/bin/texi2dvi
configure:4099: result: /usr/bin/texi2dvi
configure:4109: checking for texi2pdf
configure:4132: found /usr/bin/texi2pdf
configure:4145: result: /usr/bin/texi2pdf
configure:4160: checking for install-info
configure:4183: found /usr/bin/install-info
configure:4196: result: /usr/bin/install-info
configure:4435: creating ./config.status

## ---------------------- ##
## Running config.status. ##
## ---------------------- ##

This file was extended by auctex config.status 13.1, which was
generated by GNU Autoconf 2.71.  Invocation command line was

  CONFIG_FILES    = 
  CONFIG_HEADERS  = 
  CONFIG_LINKS    = 
  CONFIG_COMMANDS = 
  $ ./config.status 

on mac-server

config.status:755: creating Makefile
config.status:755: creating tex-site.el.out
config.status:755: creating doc/Makefile
config.status:755: creating auctex.el
config.status:755: creating preview.el
config.status:755: creating latex/Makefile
configure:5442: WARNING: unrecognized options: --with-lisp-dir

## ---------------- ##
## Cache variables. ##
## ---------------- ##

ac_cv_env_GS_set=
ac_cv_env_GS_value=
ac_cv_env_INSTALL_INFO_set=
ac_cv_env_INSTALL_INFO_value=
ac_cv_env_MAKEINFO_set=
ac_cv_env_MAKEINFO_value=
ac_cv_env_PERL_set=
ac_cv_env_PERL_value=
ac_cv_env_TEXHASH_set=
ac_cv_env_TEXHASH_value=
ac_cv_env_build_alias_set=
ac_cv_env_build_alias_value=
ac_cv_env_host_alias_set=
ac_cv_env_host_alias_value=
ac_cv_env_target_alias_set=
ac_cv_env_target_alias_value=
ac_cv_path_DVIPS=/Library/TeX/texbin/dvips
ac_cv_path_EMACS=/opt/homebrew/bin/emacs
ac_cv_path_INSTALL_INFO=/usr/bin/install-info
ac_cv_path_LATEX=/Library/TeX/texbin/latex
ac_cv_path_MAKEINFO=/usr/bin/makeinfo
ac_cv_path_PDFLATEX=/Library/TeX/texbin/pdflatex
ac_cv_path_PDFTEX=/Library/TeX/texbin/pdftex
ac_cv_path_PERL=/usr/bin/perl
ac_cv_path_TEX=/Library/TeX/texbin/tex
ac_cv_path_TEXHASH=/Library/TeX/texbin/texhash
ac_cv_path_TEXI2DVI=/usr/bin/texi2dvi
ac_cv_path_TEXI2HTML=:
ac_cv_path_TEXI2PDF=/usr/bin/texi2pdf
ac_cv_path_install='/opt/homebrew/bin/ginstall -c'
ac_cv_prog_GS=gs
ac_cv_prog_MAKECMD=make
ac_cv_prog_TEXHASH=/Library/TeX/texbin/texhash
ac_cv_prog_make_make_set=yes

## ----------------- ##
## Output variables. ##
## ----------------- ##

AUCTEXDATE='2022-05-13'
AUCTEXVERSION='13.1'
DEFS='-DPACKAGE_NAME=\"auctex\" -DPACKAGE_TARNAME=\"auctex\" -DPACKAGE_VERSION=\"13.1\" -DPACKAGE_STRING=\"auctex\ 13.1\" -DPACKAGE_BUGREPORT=\"bug-auctex@gnu.org\" -DPACKAGE_URL=\"\"'
DVIPS='/Library/TeX/texbin/dvips'
ECHO_C='\c'
ECHO_N=''
ECHO_T=''
EMACS='/opt/homebrew/bin/emacs'
EMACS_FLAVOR='emacs'
GS='gs'
INSTALL_DATA='${INSTALL} -m 644'
INSTALL_INFO='/usr/bin/install-info'
INSTALL_PROGRAM='${INSTALL}'
INSTALL_SCRIPT='${INSTALL}'
LATEX='/Library/TeX/texbin/latex'
LIBOBJS=''
LIBS=''
LTLIBOBJS=''
MAKECMD='make'
MAKEINFO='/usr/bin/makeinfo'
PACKAGE_BUGREPORT='bug-auctex@gnu.org'
PACKAGE_NAME='auctex'
PACKAGE_STRING='auctex 13.1'
PACKAGE_TARNAME='auctex'
PACKAGE_URL=''
PACKAGE_VERSION='13.1'
PATH_SEPARATOR=':'
PDFLATEX='/Library/TeX/texbin/pdflatex'
PDFTEX='/Library/TeX/texbin/pdftex'
PERL='/usr/bin/perl'
PREVIEWDATE='2022-05-13'
PREVIEWVERSION='13.1'
SET_MAKE=''
SHELL='/bin/sh'
TEX='/Library/TeX/texbin/tex'
TEXHASH='/Library/TeX/texbin/texhash'
TEXI2DVI='/usr/bin/texi2dvi'
TEXI2HTML=':'
TEXI2PDF='/usr/bin/texi2pdf'
TEXMFGEN='preview.sty prauctex.def prauctex.cfg prshowbox.def prshowlabels.def prtracingall.def prtightpage.def prlyx.def prcounters.def prfootnotes.def'
auctexstartfile='/opt/homebrew/share/emacs/site-lisp/auctex.el'
autodir='${localstatedir}/auctex'
bindir='${exec_prefix}/bin'
build_alias=''
datadir='${datarootdir}'
datarootdir='${prefix}/share'
docdir='${datarootdir}/doc/${PACKAGE_TARNAME}'
dvidir='${docdir}'
exec_prefix='${prefix}'
host_alias=''
htmldir='${docdir}'
includedir='${prefix}/include'
infodir='${datarootdir}/info'
libdir='${exec_prefix}/lib'
libexecdir='${exec_prefix}/libexec'
lispGS=''
lispautodir='"/usr/local/var/auctex"'
lispdir='/opt/homebrew/share/emacs/site-lisp'
lisppackagedatadir='(expand-file-name "auctex" (file-name-directory load-file-name))'
lisppackagelispdir='(expand-file-name "auctex" (file-name-directory load-file-name))'
lisppackagetexstyles=''
lisptexsite='(expand-file-name "tex-site.el" (file-name-directory load-file-name))'
localedir='${datarootdir}/locale'
localstatedir='${prefix}/var'
mandir='${datarootdir}/man'
oldincludedir='/usr/include'
packagedatadir='/opt/homebrew/share/emacs/site-lisp/auctex'
packagelispdir='/opt/homebrew/share/emacs/site-lisp/auctex'
packagetexstyles=''
pdfdir='${docdir}'
prefix='/usr/local'
preview_enabled='yes'
previewdocdir='/usr/local/texlive/texmf-local/doc/latex/styles'
previewstartfile='/opt/homebrew/share/emacs/site-lisp/preview-latex.el'
previewtexmfdir='/usr/local/texlive/texmf-local/tex/latex/preview'
program_transform_name='s,x,x,'
psdir='${docdir}'
runstatedir='${localstatedir}/run'
sbindir='${exec_prefix}/sbin'
sharedstatedir='${prefix}/com'
sysconfdir='${prefix}/etc'
target_alias=''
texmfdir='/usr/local/texlive/texmf-local'
texsite=''

## ----------- ##
## confdefs.h. ##
## ----------- ##

/* confdefs.h */
#define PACKAGE_NAME "auctex"
#define PACKAGE_TARNAME "auctex"
#define PACKAGE_VERSION "13.1"
#define PACKAGE_STRING "auctex 13.1"
#define PACKAGE_BUGREPORT "bug-auctex@gnu.org"
#define PACKAGE_URL ""

configure: exit 0
